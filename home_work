# Задание 1
# Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
# В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
# Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.

# production = int(input("Введите фактическую выработку >>> "))
# stavka = float(input("Введите ставку за единицу выработки >>> "))
# bonus = int(input("Введите размер премии >>> "))
# через контекстное меню и ввод параметров в окне "Modify run configuration" расчет не идет, поэтому по старинке через Input

virabotka = 110 
stavka = 2.5
bonus = 220

def calculate(virabotka, stavka, bonus):
    try:
        return (virabotka * stavka) + bonus
    except TypeError:
        return

print(calculate(virabotka, stavka, bonus))



import sys

from Lesson04 import my_mod_salary

try:
    virabotka, stavka, bonus = sys.argv
except ValueError:
        exit()

print(my_mod_salary.calculate(virabotka, stavka, bonus))


# Задание 2
# Представлен список чисел. Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
# Подсказка: элементы, удовлетворяющие условию, оформить в виде списка. Для формирования списка использовать генератор.
# Пример исходного списка: [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55].
# Результат: [12, 44, 4, 10, 78, 123].

list = [300, 2, 12, 44, 1, 1, 4, 10, 7, 1, 78, 123, 55]

print(f"Исходный список: {list}")
new_list = []
for i in range (1, len(list)):
    if list[i] > list[i - 1]:
        (new_list.append(list[i]))

print(f"Новый список: {new_list}")


# Задание 3
# Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21. Необходимо решить задание в одну строку.
# Подсказка: использовать функцию range() и генератор.

list = [i for i in range(20, 240) if i % 20 == 0 or i % 21 == 0]

print("Для чисел в пределах от 20 до 240 кратные числа следующие: ", list)


# Задание 4
# Представлен список чисел. Определить элементы списка, не имеющие повторений.
# Сформировать итоговый массив чисел, соответствующих требованию.
# Элементы вывести в порядке их следования в исходном списке.
# Для выполнения задания обязательно использовать генератор.
# Пример исходного списка: [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11].
# Результат: [23, 1, 3, 10, 4, 11]

initial_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
print("Элементы исходного списка: ", initial_list)

new_list = [i for i in initial_list if initial_list.count(i) == 1]
print("Элементы исходного списка, не имеющие повторений: ", new_list)


# Задание 5
# Реализовать формирование списка, используя функцию range() и возможности генератора.
# В список должны войти четные числа от 100 до 1000 (включая границы).
# Необходимо получить результат вычисления произведения всех элементов списка.
# Подсказка: использовать функцию reduce().

from functools import reduce

list = [i for i in range(100, 1001, 2)]
print("Список чётных чисел от 100 до 1000: ", list)
print("Произведение всех элементов списка:", reduce(lambda x,y: x*y, list))


# Задание 6
# Реализовать два небольших скрипта:
# а) итератор, генерирующий целые числа, начиная с указанного,
# б) итератор, повторяющий элементы некоторого списка, определенного заранее.
#
# Подсказка: использовать функцию count() и cycle() модуля itertools.
# Обратите внимание, что создаваемый цикл не должен быть бесконечным.
# Необходимо предусмотреть условие его завершения.
#
# Например, в первом задании выводим целые числа, начиная с 3, а при достижении числа 10 завершаем цикл.
# Во втором также необходимо предусмотреть условие, при котором повторение элементов списка будет прекращено.

from itertools import count

print("а) итератор, генерирующий целые числа, начиная с указанного")
begin = int(input("Введите целое начальное число >>> "))
end = int(input("Введите лимит для генератора >>> "))

new_list = []
for i in range (begin, end):
    if i % 1 == 0:
        (new_list.append(i))

print(f"Список целых чисел от {begin} до {end} >>>", new_list)


print("б) итератор, повторяющий элементы некоторого списка, определенного заранее")

from itertools import cycle

my_list = [1, 2, 3, 4, 5]
second_list = []

print(f"Исходный список >>> {my_list}")
n = 0
m = int(input("Сколько раз повторить список? >>> "))
for i in cycle(my_list):
    if n != len(my_list) * m :
        (second_list.append(i))
        n += 1
    else:
        break

print(second_list)


# Задание 7
# Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
# При вызове функции должен создаваться объект-генератор.
# Функция должна вызываться следующим образом: for el in fact(n).
# Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
# Подсказка: факториал числа n — произведение чисел от 1 до n. Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.

from math import factorial

def fact(n):
    for i in range(n+1):
        print(i, end ='! = ')
        yield factorial(i)

n = int(input("Факториал какого числа нужно найти? >>> "))
for el in fact(n):
    print(el)

